C and Go
2 May 2018

Patrick Stephen
Software Engineer, Contractor (currently at SpringboardVR)
patrick.d.stephen@gmail.com

* Topics

- History
- Code Style
- Performance
- Concurrency
- C and Go interop
- Odds and Ends

* History

* History of Go

: So I won't go into the history of C here, because presumably
: we're at least a little familar with it, but I will provide a little timeline
: of Go.

- Prototyping began in 2009, led by Rob Pike, Ken Thompson, and Robert Griesemer.
- 1.0 released in 2012
- Go rewritten entirely in Go in 2015 (was written in C) 
- "2.0" announced to be in talks in 2017
- 1.10 (most recent version) released in February, 2018
.image hiking.png _ 300
.caption _Gopher_ by [[https://www.instagram.com/reneefrench/][Ren√©e French]]
.caption art by egonelbre

: 2.0's announcment was more of a call for ideas of what to add to Go for 
: a potential 2.0 release-- different people in charge of Go have said 
: things referring to the absence of polymorphic parameterization (generics)
: in Go and how 2.0 would change that; others have said "2.0" might not contain
: any breaking changes and might just be 1.15 or whatever. 

* History of Go (cont.)

- Largely inspired by dissatisfaction with C++ and Java
- Broadly designed as Oberon structured code with C tokens.
- Focus on concurrency and productivity through readability

* Code Style

* Code Style 

Go and C have a lot of commonalities in code style. Almost all of Go's tokens
are also C tokens, and those that aren't are almost all concurrency-related.

.code hello.c
.caption Hello World in C
.code hello.go
.caption Hello World in Go


* Code Style (cont.)

Some differences from C:

- No need for semicolons (But they are allowed)
- Brace positioning (enforced by *gofmt*)
- Fewer parentheses in conditionals, loops
.code paren.c
.code paren.go
- Function pointer syntax
.code fp.c
.code fp.go


* Code Style (cont.)

Missing things:

- No type qualifiers
- No multi-word types (*uint* instead of *unsigned* *int*)
- No compound, statement expressions

New things:

- Concurrency primitives: *go*, *chan*, *select*
- *fallthrough* in switch statements
- *package* statements for each file

* Performance

* Performance In Theory

.image perf.png
.caption Credit Keval Patel

* Performance In Practice

Go obviously isn't going to beat out C in terms of performance, or even Java in
some cases just as a result of the age of the Go compiler. 

Selected benchmarks from [[https://benchmarksgame-team.pages.debian.net/benchmarksgame/][benchmarksgame]]:

Generating digits of Pi:
- C (gcc) *1.74* secs
- Go *2.02* secs

Generate DNA sequences:
- C (gcc) *1.32* secs
- Go *2.08* secs

* Performance In Practice (cont.)

Count nucleotides:
- C (gcc) *6.67* secs
- Go *12.77* secs

Model the orbits of Jovian planets:
- C (gcc) *9.12* secs
- Go *21.37* secs

Plot the Mandelbrot set [-1.5-i,0.5+i] as a bitmap:
- C (gcc) *1.64* secs
- Go *5.48* secs

Perform work with binary trees:
- C (gcc) *2.44* secs
- Go *28.80* secs

* Concurrency

* Concurrency 

Approaches in C:

- POSIX Threads
- Cilk
- (C++) Halide
- ...

In Go: 

- Built in types and operations

* Goroutines

- The *go* keyword takes any function and spawns *goroutines* to handle them.
- Goroutines are managed by a scheduler.
- They can be scheduled in parallel or not, depending on the system.
- Network operations, file system IO and *channel* operations yield to the scheduler

* Channels

- *channels* act as a thread-safe way for goroutines to share data. 
- One can send data to a channel or recieve from a channel
- Using channels blocks if nothing is waiting to be sent or recieved 
- The *select* operation will pull from the earliest non-blocking channel send or recieve. 

* Concurrency In Practice

.code prime.go /^func Generate/,/^}/
.code prime.go /^func Filter/,/^}/

* Concurrency In Practice

.play prime.go /^func main/,/^}/

* C-Go Interop
* Calling C from Go

: The examples here are taken from a Go blog post on C-Go interop.

.code rand.go


* Calling C from Go (cont.) 

- Flags like _CFLAGS_, _CPPFLAGS_, and _LDFLAGS_ can be defined in comments:
.code cgocomment.go
- *C.malloc* cannot return nil, and will crash the program instead if it would.
- Several picky restrictions on passing and returning pointers between C and Go

* Calling Go from C

This Go code:

.code cgoexport.go

And this build command: 

.code cgobuild.go

Results in:

.code cgoexport.c

: Important to note about this code is that the resulting .so file will likely
: exceed a couple of megabytes-- it contains the entirety of Go's runtime. 

* Odds and Ends
* Tooling 

Go comes with dozens of helpful tools to reduce the need for IDEs and to keep 
Go users using similar practices and code formatting:

- *go* *fmt* for formatting
- *go* *get* for pulling in packages
- *go* *run/build/install* for running/building/installing code
- *go* *test* for testing and benchmarks
- *go* *vet* for checking for problematic code
- *go* *tool* *<tool>* for other extensions 
 
* Stdlib: Networking

The *net* package:

- UDP / TCP / IP primitives
- Network interface iteration, multicasting
- Network lookup, direct DNS lookup

* Stdlib: HTTP

The *net/http* package:

- Handle incoming http requests through Go functions 
- Serve files and offer file directories
- Directly execute http requests 

* Stdlib: Encoding

The *encoding/json* package:

- Load JSON files directly into Go struct types
- Write Go structs out as JSON data 
- Define explicit encodings for your own types 

* Pros/Cons

C Cons

- Functional Programming is Difficult
- No Generics
- Hard to Parse Errors
- Less Type Safety

Go Cons

- Functional Programming is Limited
- No Generics
- Garbage Collection is Slow
- No Pointer Arithmetic (should you want it)

* Pros/Cons

C Pros

- Performance
- Complete Memory Control
- Smaller Binaries
- Elegant

Go Pros

- Garbage Collection is Easy 
- Large Standard Library
- Convenient Tooling
- Built-in Concurrency
- Elegant


* Other Links
Robert Grisemer gave a talk on almost this exact premise in 2012:
.link https://talks.golang.org/2012/goforc.slide

There's a maintained page by the Go developers on Go vs C++:
.link https://github.com/golang/go/wiki/GoForCPPProgrammers

This presentation can be found at:
.link https://github.com/200sc/cpresent